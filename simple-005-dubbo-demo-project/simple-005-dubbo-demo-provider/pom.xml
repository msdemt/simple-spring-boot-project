<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>simple-005-dubbo-demo-project</artifactId>
        <groupId>com.example</groupId>
        <version>${revision}</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <artifactId>simple-005-dubbo-demo-provider</artifactId>

    <properties>
        <slf4j-log4j12.version>1.7.25</slf4j-log4j12.version>
    </properties>

    <dependencies>
        <!-- Spring Boot dependencies-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- Dubbo Spring Boot dependencies -->
        <dependency>
            <groupId>org.apache.dubbo</groupId>
            <artifactId>dubbo-spring-boot-starter</artifactId>
        </dependency>

        <!--如果继承父pom dependencyManagement中type为pom的dependency，需要写上type pom，否则无法加载为依赖-->
        <dependency>
            <groupId>org.apache.dubbo</groupId>
            <artifactId>dubbo-dependencies-zookeeper</artifactId>
            <type>pom</type>
        </dependency>

        <!-- module dependencies -->
        <dependency>
            <groupId>com.example</groupId>
            <artifactId>simple-005-dubbo-demo-interface</artifactId>
            <version>1.0.0</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring-boot.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <executable>false</executable>
                    <finalName>${project.artifactId}-${spring-boot.version}</finalName>
                    <outputDirectory>${user.dir}/target</outputDirectory>
                </configuration>
            </plugin>

            <plugin>
                <groupId>com.github.wvengen</groupId>
                <artifactId>proguard-maven-plugin</artifactId>
                <version>2.3.1</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>proguard</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <attach>true</attach>
                    <obfuscate>true</obfuscate>
                    <attachArtifactClassifier>pg</attachArtifactClassifier>
                    <options>
                        <option>-printmapping '${project.build.directory}/${project.artifactId}.log'</option>
                        <option>-ignorewarnings</option>
                        <option>-dontshrink</option>
                        <option>-dontoptimize</option>
                        <option>-dontusemixedcaseclassnames</option>
                        <option>-dontskipnonpubliclibraryclasses</option>
                        <option>-dontskipnonpubliclibraryclassmembers</option>
                        <option>-allowaccessmodification</option>
                        <option>-useuniqueclassmembernames</option>
                        <option>-keeppackagenames</option>
                        <option>-adaptclassstrings</option>
                        <option>-keepdirectories</option>
                        <option>-keepattributes
                            Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,LocalVariable*Table,*Annotation*,Synthetic,EnclosingMethod
                        </option>
                        <option>-keepnames interface **</option>
                        <!-- This option will save all original methods parameters in files
            defined in -keep sections, otherwise all parameter names will be obfuscate. -->
                        <option>-keepparameternames</option>
                        <option>-keepclassmembers class * {
                            @org.springframework.beans.factory.annotation.Autowired *;
                            @org.springframework.beans.factory.annotation.Value *;
                            @org.springframework.context.annotation.Bean *;
                            @org.springframework.beans.factory.annotation.Qualifier *;
                            @org.springframework.stereotype.Repository *;
                            @org.springframework.data.repository.NoRepositoryBean *;
                            }
                        </option>
                        <option>-keepclassmembers enum * { *; }</option>
                        <option>-keep class * implements java.io.Serializable</option>

                        <option>-keep class com.example.ykp.App { *; }</option>
                        <option>-keepclassmembers public class * {void set*(***);*** get*();}</option>
                    </options>

                    <outjar>${project.build.finalName}-pg.jar</outjar>
                    <libs>
                        <!-- <lib>${java.home}/jmods/java.base.jmod</lib> -->
                        <lib>${java.home}/lib/rt.jar</lib>
                        <!-- <lib>${java.home}/lib/jce.jar</lib> -->
                    </libs>

                    <injar>classes</injar>
                    <outputDirectory>${project.build.directory}</outputDirectory>
                </configuration>
            </plugin>
        </plugins>
    </build>


</project>
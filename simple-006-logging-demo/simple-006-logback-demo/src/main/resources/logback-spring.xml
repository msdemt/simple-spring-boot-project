<?xml version="1.0" encoding="UTF-8"?>
<!--
    scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
    scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒；当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <contextName>logback</contextName>
    <!--获取application.yml定义的属性-->
    <springProperty scope="context" name="logPath" source="logging.file.name"/>
    <springProperty scope="context" name="appName" source="spring.application.name"/>
    <!--定义日志存储路径-->
    <property name="LOG_HOME" value="${user.home}/logs/${appName}"/>
    <!--
    日志输出格式：
			%d表示日期时间，
			%thread表示线程名，
			%-5level：级别从左显示5个字符宽度
			%logger{50} 表示logger名字最长50个字符，否则按照句点分割。
			%msg：日志消息，
			%n是换行符
    -->
    <property name="LOG_PATTERN"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] - [%-5level] [%logger{50} : %line] - %msg%n"/>
    <property name="LOG_CHARSET" value="UTF-8"/>

    <!--控制台日志-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <target>System.out</target>
        <!--控制台输出的日志级别是大于或等于此级别的日志信息-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>debug</level>
        </filter>
        <encoder>
            <pattern>${LOG_PATTERN}</pattern>
            <!--设置字符集-->
            <charset>${LOG_CHARSET}</charset>
        </encoder>
    </appender>

    <!--
        滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件
        https://logback.qos.ch/manual/appenders.html
    -->
    <appender name="DEBUG_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${LOG_HOME}/${appName}-debug.log</file>
        <!--如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true-->
        <append>true</append>
        <encoder>
            <!--http://logback.qos.ch/manual/encoders.html-->
            <pattern>${LOG_PATTERN}</pattern>  <!--若不配置，启动会报错-->
            <charset>UTF-8</charset> <!-- 设置字符集 -->
        </encoder>
        <!--日志级别过滤器-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 日志输出格式，推荐使用 encoder.layout-->
        <!--<layout class="ch.qos.logback.classic.PatternLayout">-->
        <!--    <pattern>${LOG_PATTERN}</pattern>-->
        <!--</layout>-->

        <!-- 日志记录器的归档滚动策略
            当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名
            TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责触发滚动。
            https://logback.qos.ch/manual/appenders.html#TimeBasedRollingPolicy
            SizeAndTimeBasedRollingPolicy:
            https://logback.qos.ch/manual/appenders.html#SizeAndTimeBasedRollingPolicy
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--
                滚动时产生的文件的存放位置及文件名称
                %d{yyyy-MM-dd}：按天进行日志滚动
                %i：当文件大小超过maxFileSize时，按照i进行文件滚动
            -->
            <fileNamePattern>${LOG_HOME}/debug/debug-%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <!--单个日志文件最大空间-->
            <maxFileSize>1GB</maxFileSize>
            <!--日志保留天数-->
            <maxHistory>31</maxHistory>
            <!--日志文件保留的最大空间，超过指定空间后删除旧日志-->
            <totalSizeCap>100GB</totalSizeCap>
        </rollingPolicy>
    </appender>


    <!--滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件-->
    <appender name="INFO_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${LOG_HOME}/${appName}-info.log</file>
        <encoder>
            <!--http://logback.qos.ch/manual/encoders.html-->
            <pattern>${LOG_PATTERN}</pattern>  <!--若不配置，启动会报错-->
            <charset>UTF-8</charset> <!-- 设置字符集 -->
        </encoder>
        <!--日志级别过滤器-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 日志输出格式，推荐使用 encoder.layout-->
        <!--<layout class="ch.qos.logback.classic.PatternLayout">-->
        <!--    <pattern>${LOG_PATTERN}</pattern>-->
        <!--</layout>-->

        <!-- 日志记录器的归档滚动策略
            当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名
            TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责触发滚动。
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--
                滚动时产生的文件的存放位置及文件名称
                %d{yyyy-MM-dd}：按天进行日志滚动
                %i：当文件大小超过maxFileSize时，按照i进行文件滚动
            -->
            <fileNamePattern>${LOG_HOME}/info/info-%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <!--
                maxHistory 根据归档日志的格式保留日志，比如本配置按天进行归档，则maxHistory的单位就是天。
                The optional maxHistory property controls the maximum number of archive files to keep,
                asynchronously deleting older files.
                For example, if you specify monthly rollover, and set maxHistory to 6,
                then 6 months worth of archives files will be kept with files older than 6 months deleted.
                Note as old archived log files are removed, any folders which were created for the purpose of
                log file archiving will be removed as appropriate.
            -->
            <maxHistory>365</maxHistory>
            <!--
                The optional totalSizeCap property controls the total size of all archive files.
                Oldest archives are deleted asynchronously when the total size cap is exceeded.
                The totalSizeCap property requires maxHistory property to be set as well.
                Moreover, the "max history" restriction is always applied first
                and the "total size cap" restriction applied second.
            -->
            <totalSizeCap>100GB</totalSizeCap>
            <!--
                当日志文件超过maxFileSize指定的大小时，根据上面提到的%i进行日志文件滚动
                注意如果此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy

                timeBasedFileNamingAndTriggeringPolicy 和 SizeAndTimeBasedRollingPolicy 的关系
                （详见：https://logback.qos.ch/manual/appenders.html#SizeAndTimeBasedRollingPolicy）：
                In versions prior to 1.1.7, this document mentioned a component called SizeAndTimeBasedFNATP.
                However, given that SizeAndTimeBasedFNATP offers a simpler configuration structure,
                we no longer document SizeAndTimeBasedFNATP.
                Nevertheless, earlier configuration files using SizeAndTimeBasedFNATP will continue to work just fine.
                In fact, SizeAndTimeBasedRollingPolicy is implemented with a SizeAndTimeBasedFNATP subcomponent.
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>1GB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
    </appender>


    <!--滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件-->
    <appender name="WARN_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${LOG_HOME}/${appName}-warn.log</file>
        <encoder>
            <!--http://logback.qos.ch/manual/encoders.html-->
            <pattern>${LOG_PATTERN}</pattern>  <!--若不配置，启动会报错-->
            <charset>UTF-8</charset> <!-- 设置字符集 -->
        </encoder>
        <!--日志级别过滤器-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 日志输出格式，推荐使用 encoder.layout-->
        <!--<layout class="ch.qos.logback.classic.PatternLayout">-->
        <!--    <pattern>${LOG_PATTERN}</pattern>-->
        <!--</layout>-->

        <!-- 日志记录器的归档滚动策略
            当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名
            TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责触发滚动。
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--
                滚动时产生的文件的存放位置及文件名称
                %d{yyyy-MM-dd}：按天进行日志滚动
                %i：当文件大小超过maxFileSize时，按照i进行文件滚动
            -->
            <fileNamePattern>${LOG_HOME}/warn/warn-%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <!--
                maxHistory 根据归档日志的格式保留日志，比如本配置按天进行归档，则maxHistory的单位就是天。
                The optional maxHistory property controls the maximum number of archive files to keep,
                asynchronously deleting older files.
                For example, if you specify monthly rollover, and set maxHistory to 6,
                then 6 months worth of archives files will be kept with files older than 6 months deleted.
                Note as old archived log files are removed, any folders which were created for the purpose of
                log file archiving will be removed as appropriate.
            -->
            <maxHistory>365</maxHistory>
            <!--
                The optional totalSizeCap property controls the total size of all archive files.
                Oldest archives are deleted asynchronously when the total size cap is exceeded.
                The totalSizeCap property requires maxHistory property to be set as well.
                Moreover, the "max history" restriction is always applied first
                and the "total size cap" restriction applied second.
            -->
            <totalSizeCap>100GB</totalSizeCap>
            <!--
                当日志文件超过maxFileSize指定的大小时，根据上面提到的%i进行日志文件滚动
                注意如果此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy

                timeBasedFileNamingAndTriggeringPolicy 和 SizeAndTimeBasedRollingPolicy 的关系
                （详见：https://logback.qos.ch/manual/appenders.html#SizeAndTimeBasedRollingPolicy）：
                In versions prior to 1.1.7, this document mentioned a component called SizeAndTimeBasedFNATP.
                However, given that SizeAndTimeBasedFNATP offers a simpler configuration structure,
                we no longer document SizeAndTimeBasedFNATP.
                Nevertheless, earlier configuration files using SizeAndTimeBasedFNATP will continue to work just fine.
                In fact, SizeAndTimeBasedRollingPolicy is implemented with a SizeAndTimeBasedFNATP subcomponent.
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>1GB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
    </appender>



    <!--滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件-->
    <appender name="ERROR_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${LOG_HOME}/${appName}-error.log</file>
        <encoder>
            <!--http://logback.qos.ch/manual/encoders.html-->
            <pattern>${LOG_PATTERN}</pattern>  <!--若不配置，启动会报错-->
            <charset>UTF-8</charset> <!-- 设置字符集 -->
        </encoder>
        <!--日志级别过滤器-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 日志输出格式，推荐使用 encoder.layout-->
        <!--<layout class="ch.qos.logback.classic.PatternLayout">-->
        <!--    <pattern>${LOG_PATTERN}</pattern>-->
        <!--</layout>-->

        <!-- 日志记录器的归档滚动策略
            当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名
            TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责触发滚动。
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--
                滚动时产生的文件的存放位置及文件名称
                %d{yyyy-MM-dd}：按天进行日志滚动
                %i：当文件大小超过maxFileSize时，按照i进行文件滚动
            -->
            <fileNamePattern>${LOG_HOME}/error/error-%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <!--
                maxHistory 根据归档日志的格式保留日志，比如本配置按天进行归档，则maxHistory的单位就是天。
                The optional maxHistory property controls the maximum number of archive files to keep,
                asynchronously deleting older files.
                For example, if you specify monthly rollover, and set maxHistory to 6,
                then 6 months worth of archives files will be kept with files older than 6 months deleted.
                Note as old archived log files are removed, any folders which were created for the purpose of
                log file archiving will be removed as appropriate.
            -->
            <maxHistory>365</maxHistory>
            <!--
                The optional totalSizeCap property controls the total size of all archive files.
                Oldest archives are deleted asynchronously when the total size cap is exceeded.
                The totalSizeCap property requires maxHistory property to be set as well.
                Moreover, the "max history" restriction is always applied first
                and the "total size cap" restriction applied second.
            -->
            <totalSizeCap>100GB</totalSizeCap>
            <!--
                当日志文件超过maxFileSize指定的大小时，根据上面提到的%i进行日志文件滚动
                注意如果此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy

                timeBasedFileNamingAndTriggeringPolicy 和 SizeAndTimeBasedRollingPolicy 的关系
                （详见：https://logback.qos.ch/manual/appenders.html#SizeAndTimeBasedRollingPolicy）：
                In versions prior to 1.1.7, this document mentioned a component called SizeAndTimeBasedFNATP.
                However, given that SizeAndTimeBasedFNATP offers a simpler configuration structure,
                we no longer document SizeAndTimeBasedFNATP.
                Nevertheless, earlier configuration files using SizeAndTimeBasedFNATP will continue to work just fine.
                In fact, SizeAndTimeBasedRollingPolicy is implemented with a SizeAndTimeBasedFNATP subcomponent.
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>1GB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
    </appender>


    <!--
        root与logger是父子关系
        org.msdemt 包中的日志被logger name="org.msdemt"进行处理打印，然后根据additivity判断是否将此logger的打印信息传递给上级
        因为当前的additivity为true，所以会传递给root，root收到后，根据它的level进行打印

        logger:
		- name：表示匹配的logger类型前缀，也就是包的前半部分
		- level：要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR
		- additivity：判断当前logger是否将打印信息传递给父logger
		（logger name="org.msdemt" 是 logger name="org.msdemt.test" 的父logger，所有logger的最顶层父logger是root），
		  - false：表示只用当前logger的规则打印日志，
		  - true：表示当前logger的规则打印日志后，将日志信息传递到它的父logger
    -->

    <!--
        配置 org.msdemt 包中打印debug及以上级别日志，其他包打印info及以上级别日志

        问题：配置如下时，控制台上会打印两份相同的debug,info,warn,error日志
        <logger name="org.msdemt" level="debug" additivity="true">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="DEBUG_LOG"/>
        </logger>

        <root level="INFO">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="DEBUG_LOG"/>
            <appender-ref ref="INFO_LOG"/>
            <appender-ref ref="WARN_LOG"/>
            <appender-ref ref="ERROR_LOG"/>
        </root>
        猜想：logger 捕获到debug及以上级别日志，打印后传给root，此时root的level没有起作用，直接把所有级别的日志都接收，然后根据appender打印了，
        所以就会出现控制台打印两份日志的情况。
    -->
    <springProfile name="dev">
        <logger name="org.msdemt" level="debug" additivity="true">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="DEBUG_LOG"/>
        </logger>

        <root level="INFO">
            <appender-ref ref="INFO_LOG"/>
            <appender-ref ref="WARN_LOG"/>
            <appender-ref ref="ERROR_LOG"/>
        </root>
    </springProfile>

    <!--
        非开发环境，统一打印info日志
        此时日志直接被root捕获，root只会捕获info及其以上级别的日志
    -->
    <springProfile name="!dev">
        <root level="info">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="DEBUG_LOG"/>
            <appender-ref ref="INFO_LOG"/>
            <appender-ref ref="WARN_LOG"/>
            <appender-ref ref="ERROR_LOG"/>
        </root>
    </springProfile>

</configuration>